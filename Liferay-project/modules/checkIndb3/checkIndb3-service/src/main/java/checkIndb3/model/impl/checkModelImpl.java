/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package checkIndb3.model.impl;

import checkIndb3.model.check;
import checkIndb3.model.checkModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the check service. Represents a row in the &quot;practice_check&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>checkModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link checkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see checkImpl
 * @generated
 */
@JSON(strict = true)
public class checkModelImpl extends BaseModelImpl<check> implements checkModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a check model instance should use the <code>check</code> interface instead.
	 */
	public static final String TABLE_NAME = "practice_check";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"checkInId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"date_", Types.TIMESTAMP}, {"day", Types.VARCHAR},
		{"checkInTime", Types.TIMESTAMP}, {"checkOutTime", Types.TIMESTAMP},
		{"totalHours", Types.VARCHAR}, {"createdAt", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("checkInId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("day", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("checkInTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("checkOutTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("totalHours", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdAt", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table practice_check (uuid_ VARCHAR(75) null,checkInId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,date_ DATE null,day VARCHAR(75) null,checkInTime DATE null,checkOutTime DATE null,totalHours VARCHAR(75) null,createdAt DATE null)";

	public static final String TABLE_SQL_DROP = "drop table practice_check";

	public static final String ORDER_BY_JPQL = " ORDER BY check_.checkInId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY practice_check.checkInId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CHECKINID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public checkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _checkInId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCheckInId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _checkInId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return check.class;
	}

	@Override
	public String getModelClassName() {
		return check.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<check, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<check, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<check, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((check)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<check, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<check, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((check)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<check, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<check, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<check, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<check, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<check, Object>>();

			attributeGetterFunctions.put("uuid", check::getUuid);
			attributeGetterFunctions.put("checkInId", check::getCheckInId);
			attributeGetterFunctions.put("groupId", check::getGroupId);
			attributeGetterFunctions.put("companyId", check::getCompanyId);
			attributeGetterFunctions.put("userId", check::getUserId);
			attributeGetterFunctions.put("userName", check::getUserName);
			attributeGetterFunctions.put("createDate", check::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", check::getModifiedDate);
			attributeGetterFunctions.put("date", check::getDate);
			attributeGetterFunctions.put("day", check::getDay);
			attributeGetterFunctions.put("checkInTime", check::getCheckInTime);
			attributeGetterFunctions.put(
				"checkOutTime", check::getCheckOutTime);
			attributeGetterFunctions.put("totalHours", check::getTotalHours);
			attributeGetterFunctions.put("createdAt", check::getCreatedAt);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<check, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<check, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<check, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<check, String>)check::setUuid);
			attributeSetterBiConsumers.put(
				"checkInId", (BiConsumer<check, Long>)check::setCheckInId);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<check, Long>)check::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<check, Long>)check::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<check, Long>)check::setUserId);
			attributeSetterBiConsumers.put(
				"userName", (BiConsumer<check, String>)check::setUserName);
			attributeSetterBiConsumers.put(
				"createDate", (BiConsumer<check, Date>)check::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<check, Date>)check::setModifiedDate);
			attributeSetterBiConsumers.put(
				"date", (BiConsumer<check, Date>)check::setDate);
			attributeSetterBiConsumers.put(
				"day", (BiConsumer<check, String>)check::setDay);
			attributeSetterBiConsumers.put(
				"checkInTime", (BiConsumer<check, Date>)check::setCheckInTime);
			attributeSetterBiConsumers.put(
				"checkOutTime",
				(BiConsumer<check, Date>)check::setCheckOutTime);
			attributeSetterBiConsumers.put(
				"totalHours", (BiConsumer<check, String>)check::setTotalHours);
			attributeSetterBiConsumers.put(
				"createdAt", (BiConsumer<check, Date>)check::setCreatedAt);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCheckInId() {
		return _checkInId;
	}

	@Override
	public void setCheckInId(long checkInId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_checkInId = checkInId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_date = date;
	}

	@JSON
	@Override
	public String getDay() {
		if (_day == null) {
			return "";
		}
		else {
			return _day;
		}
	}

	@Override
	public void setDay(String day) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_day = day;
	}

	@JSON
	@Override
	public Date getCheckInTime() {
		return _checkInTime;
	}

	@Override
	public void setCheckInTime(Date checkInTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_checkInTime = checkInTime;
	}

	@JSON
	@Override
	public Date getCheckOutTime() {
		return _checkOutTime;
	}

	@Override
	public void setCheckOutTime(Date checkOutTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_checkOutTime = checkOutTime;
	}

	@JSON
	@Override
	public String getTotalHours() {
		if (_totalHours == null) {
			return "";
		}
		else {
			return _totalHours;
		}
	}

	@Override
	public void setTotalHours(String totalHours) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalHours = totalHours;
	}

	@JSON
	@Override
	public Date getCreatedAt() {
		return _createdAt;
	}

	@Override
	public void setCreatedAt(Date createdAt) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdAt = createdAt;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(check.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), check.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public check toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, check>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		checkImpl checkImpl = new checkImpl();

		checkImpl.setUuid(getUuid());
		checkImpl.setCheckInId(getCheckInId());
		checkImpl.setGroupId(getGroupId());
		checkImpl.setCompanyId(getCompanyId());
		checkImpl.setUserId(getUserId());
		checkImpl.setUserName(getUserName());
		checkImpl.setCreateDate(getCreateDate());
		checkImpl.setModifiedDate(getModifiedDate());
		checkImpl.setDate(getDate());
		checkImpl.setDay(getDay());
		checkImpl.setCheckInTime(getCheckInTime());
		checkImpl.setCheckOutTime(getCheckOutTime());
		checkImpl.setTotalHours(getTotalHours());
		checkImpl.setCreatedAt(getCreatedAt());

		checkImpl.resetOriginalValues();

		return checkImpl;
	}

	@Override
	public check cloneWithOriginalValues() {
		checkImpl checkImpl = new checkImpl();

		checkImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		checkImpl.setCheckInId(this.<Long>getColumnOriginalValue("checkInId"));
		checkImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		checkImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		checkImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		checkImpl.setUserName(this.<String>getColumnOriginalValue("userName"));
		checkImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		checkImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		checkImpl.setDate(this.<Date>getColumnOriginalValue("date_"));
		checkImpl.setDay(this.<String>getColumnOriginalValue("day"));
		checkImpl.setCheckInTime(
			this.<Date>getColumnOriginalValue("checkInTime"));
		checkImpl.setCheckOutTime(
			this.<Date>getColumnOriginalValue("checkOutTime"));
		checkImpl.setTotalHours(
			this.<String>getColumnOriginalValue("totalHours"));
		checkImpl.setCreatedAt(this.<Date>getColumnOriginalValue("createdAt"));

		return checkImpl;
	}

	@Override
	public int compareTo(check check) {
		long primaryKey = check.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof check)) {
			return false;
		}

		check check = (check)object;

		long primaryKey = check.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<check> toCacheModel() {
		checkCacheModel checkCacheModel = new checkCacheModel();

		checkCacheModel.uuid = getUuid();

		String uuid = checkCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			checkCacheModel.uuid = null;
		}

		checkCacheModel.checkInId = getCheckInId();

		checkCacheModel.groupId = getGroupId();

		checkCacheModel.companyId = getCompanyId();

		checkCacheModel.userId = getUserId();

		checkCacheModel.userName = getUserName();

		String userName = checkCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			checkCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			checkCacheModel.createDate = createDate.getTime();
		}
		else {
			checkCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			checkCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			checkCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date date = getDate();

		if (date != null) {
			checkCacheModel.date = date.getTime();
		}
		else {
			checkCacheModel.date = Long.MIN_VALUE;
		}

		checkCacheModel.day = getDay();

		String day = checkCacheModel.day;

		if ((day != null) && (day.length() == 0)) {
			checkCacheModel.day = null;
		}

		Date checkInTime = getCheckInTime();

		if (checkInTime != null) {
			checkCacheModel.checkInTime = checkInTime.getTime();
		}
		else {
			checkCacheModel.checkInTime = Long.MIN_VALUE;
		}

		Date checkOutTime = getCheckOutTime();

		if (checkOutTime != null) {
			checkCacheModel.checkOutTime = checkOutTime.getTime();
		}
		else {
			checkCacheModel.checkOutTime = Long.MIN_VALUE;
		}

		checkCacheModel.totalHours = getTotalHours();

		String totalHours = checkCacheModel.totalHours;

		if ((totalHours != null) && (totalHours.length() == 0)) {
			checkCacheModel.totalHours = null;
		}

		Date createdAt = getCreatedAt();

		if (createdAt != null) {
			checkCacheModel.createdAt = createdAt.getTime();
		}
		else {
			checkCacheModel.createdAt = Long.MIN_VALUE;
		}

		return checkCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<check, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<check, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<check, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((check)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, check>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					check.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _checkInId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _date;
	private String _day;
	private Date _checkInTime;
	private Date _checkOutTime;
	private String _totalHours;
	private Date _createdAt;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<check, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((check)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("checkInId", _checkInId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("date_", _date);
		_columnOriginalValues.put("day", _day);
		_columnOriginalValues.put("checkInTime", _checkInTime);
		_columnOriginalValues.put("checkOutTime", _checkOutTime);
		_columnOriginalValues.put("totalHours", _totalHours);
		_columnOriginalValues.put("createdAt", _createdAt);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("date_", "date");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("checkInId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("date_", 256L);

		columnBitmasks.put("day", 512L);

		columnBitmasks.put("checkInTime", 1024L);

		columnBitmasks.put("checkOutTime", 2048L);

		columnBitmasks.put("totalHours", 4096L);

		columnBitmasks.put("createdAt", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private check _escapedModel;

}