/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package library.db.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import library.db.model.library_books;
import library.db.model.library_booksModel;

/**
 * The base model implementation for the library_books service. Represents a row in the &quot;lib_library_books&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>library_booksModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link library_booksImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see library_booksImpl
 * @generated
 */
@JSON(strict = true)
public class library_booksModelImpl
	extends BaseModelImpl<library_books> implements library_booksModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a library_books model instance should use the <code>library_books</code> interface instead.
	 */
	public static final String TABLE_NAME = "lib_library_books";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"libId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"book_name", Types.VARCHAR}, {"author", Types.VARCHAR},
		{"title", Types.INTEGER}, {"publisherd_year", Types.INTEGER},
		{"category", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("libId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("book_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("author", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("publisherd_year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table lib_library_books (uuid_ VARCHAR(75) null,libId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,book_name VARCHAR(75) null,author VARCHAR(75) null,title INTEGER,publisherd_year INTEGER,category VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table lib_library_books";

	public static final String ORDER_BY_JPQL =
		" ORDER BY library_books.publisherd_year ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY lib_library_books.publisherd_year ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PUBLISHERD_YEAR_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public library_booksModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _libId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLibId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _libId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return library_books.class;
	}

	@Override
	public String getModelClassName() {
		return library_books.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<library_books, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<library_books, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<library_books, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((library_books)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<library_books, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<library_books, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(library_books)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<library_books, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<library_books, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<library_books, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<library_books, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<library_books, Object>>();

			attributeGetterFunctions.put("uuid", library_books::getUuid);
			attributeGetterFunctions.put("libId", library_books::getLibId);
			attributeGetterFunctions.put("groupId", library_books::getGroupId);
			attributeGetterFunctions.put(
				"companyId", library_books::getCompanyId);
			attributeGetterFunctions.put("userId", library_books::getUserId);
			attributeGetterFunctions.put(
				"userName", library_books::getUserName);
			attributeGetterFunctions.put(
				"createDate", library_books::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", library_books::getModifiedDate);
			attributeGetterFunctions.put(
				"book_name", library_books::getBook_name);
			attributeGetterFunctions.put("author", library_books::getAuthor);
			attributeGetterFunctions.put("title", library_books::getTitle);
			attributeGetterFunctions.put(
				"publisherd_year", library_books::getPublisherd_year);
			attributeGetterFunctions.put(
				"category", library_books::getCategory);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<library_books, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<library_books, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<library_books, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<library_books, String>)library_books::setUuid);
			attributeSetterBiConsumers.put(
				"libId",
				(BiConsumer<library_books, Long>)library_books::setLibId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<library_books, Long>)library_books::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<library_books, Long>)library_books::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<library_books, Long>)library_books::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<library_books, String>)library_books::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<library_books, Date>)library_books::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<library_books, Date>)
					library_books::setModifiedDate);
			attributeSetterBiConsumers.put(
				"book_name",
				(BiConsumer<library_books, String>)library_books::setBook_name);
			attributeSetterBiConsumers.put(
				"author",
				(BiConsumer<library_books, String>)library_books::setAuthor);
			attributeSetterBiConsumers.put(
				"title",
				(BiConsumer<library_books, Integer>)library_books::setTitle);
			attributeSetterBiConsumers.put(
				"publisherd_year",
				(BiConsumer<library_books, Integer>)
					library_books::setPublisherd_year);
			attributeSetterBiConsumers.put(
				"category",
				(BiConsumer<library_books, String>)library_books::setCategory);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getLibId() {
		return _libId;
	}

	@Override
	public void setLibId(long libId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_libId = libId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getBook_name() {
		if (_book_name == null) {
			return "";
		}
		else {
			return _book_name;
		}
	}

	@Override
	public void setBook_name(String book_name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_book_name = book_name;
	}

	@JSON
	@Override
	public String getAuthor() {
		if (_author == null) {
			return "";
		}
		else {
			return _author;
		}
	}

	@Override
	public void setAuthor(String author) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_author = author;
	}

	@JSON
	@Override
	public int getTitle() {
		return _title;
	}

	@Override
	public void setTitle(int title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public int getPublisherd_year() {
		return _publisherd_year;
	}

	@Override
	public void setPublisherd_year(int publisherd_year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_publisherd_year = publisherd_year;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return "";
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_category = category;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(library_books.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), library_books.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public library_books toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, library_books>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		library_booksImpl library_booksImpl = new library_booksImpl();

		library_booksImpl.setUuid(getUuid());
		library_booksImpl.setLibId(getLibId());
		library_booksImpl.setGroupId(getGroupId());
		library_booksImpl.setCompanyId(getCompanyId());
		library_booksImpl.setUserId(getUserId());
		library_booksImpl.setUserName(getUserName());
		library_booksImpl.setCreateDate(getCreateDate());
		library_booksImpl.setModifiedDate(getModifiedDate());
		library_booksImpl.setBook_name(getBook_name());
		library_booksImpl.setAuthor(getAuthor());
		library_booksImpl.setTitle(getTitle());
		library_booksImpl.setPublisherd_year(getPublisherd_year());
		library_booksImpl.setCategory(getCategory());

		library_booksImpl.resetOriginalValues();

		return library_booksImpl;
	}

	@Override
	public library_books cloneWithOriginalValues() {
		library_booksImpl library_booksImpl = new library_booksImpl();

		library_booksImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		library_booksImpl.setLibId(this.<Long>getColumnOriginalValue("libId"));
		library_booksImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		library_booksImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		library_booksImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		library_booksImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		library_booksImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		library_booksImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		library_booksImpl.setBook_name(
			this.<String>getColumnOriginalValue("book_name"));
		library_booksImpl.setAuthor(
			this.<String>getColumnOriginalValue("author"));
		library_booksImpl.setTitle(
			this.<Integer>getColumnOriginalValue("title"));
		library_booksImpl.setPublisherd_year(
			this.<Integer>getColumnOriginalValue("publisherd_year"));
		library_booksImpl.setCategory(
			this.<String>getColumnOriginalValue("category"));

		return library_booksImpl;
	}

	@Override
	public int compareTo(library_books library_books) {
		int value = 0;

		if (getPublisherd_year() < library_books.getPublisherd_year()) {
			value = -1;
		}
		else if (getPublisherd_year() > library_books.getPublisherd_year()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof library_books)) {
			return false;
		}

		library_books library_books = (library_books)object;

		long primaryKey = library_books.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<library_books> toCacheModel() {
		library_booksCacheModel library_booksCacheModel =
			new library_booksCacheModel();

		library_booksCacheModel.uuid = getUuid();

		String uuid = library_booksCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			library_booksCacheModel.uuid = null;
		}

		library_booksCacheModel.libId = getLibId();

		library_booksCacheModel.groupId = getGroupId();

		library_booksCacheModel.companyId = getCompanyId();

		library_booksCacheModel.userId = getUserId();

		library_booksCacheModel.userName = getUserName();

		String userName = library_booksCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			library_booksCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			library_booksCacheModel.createDate = createDate.getTime();
		}
		else {
			library_booksCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			library_booksCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			library_booksCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		library_booksCacheModel.book_name = getBook_name();

		String book_name = library_booksCacheModel.book_name;

		if ((book_name != null) && (book_name.length() == 0)) {
			library_booksCacheModel.book_name = null;
		}

		library_booksCacheModel.author = getAuthor();

		String author = library_booksCacheModel.author;

		if ((author != null) && (author.length() == 0)) {
			library_booksCacheModel.author = null;
		}

		library_booksCacheModel.title = getTitle();

		library_booksCacheModel.publisherd_year = getPublisherd_year();

		library_booksCacheModel.category = getCategory();

		String category = library_booksCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			library_booksCacheModel.category = null;
		}

		return library_booksCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<library_books, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<library_books, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<library_books, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((library_books)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, library_books>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					library_books.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _libId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _book_name;
	private String _author;
	private int _title;
	private int _publisherd_year;
	private String _category;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<library_books, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((library_books)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("libId", _libId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("book_name", _book_name);
		_columnOriginalValues.put("author", _author);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("publisherd_year", _publisherd_year);
		_columnOriginalValues.put("category", _category);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("libId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("book_name", 256L);

		columnBitmasks.put("author", 512L);

		columnBitmasks.put("title", 1024L);

		columnBitmasks.put("publisherd_year", 2048L);

		columnBitmasks.put("category", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private library_books _escapedModel;

}