/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package AddAmbulanceDb.model.impl;

import AddAmbulanceDb.model.Driver;
import AddAmbulanceDb.model.DriverModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Driver service. Represents a row in the &quot;HSP_Driver&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DriverModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DriverImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DriverImpl
 * @generated
 */
@JSON(strict = true)
public class DriverModelImpl
	extends BaseModelImpl<Driver> implements DriverModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a driver model instance should use the <code>Driver</code> interface instead.
	 */
	public static final String TABLE_NAME = "HSP_Driver";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"driverId", Types.BIGINT},
		{"hospitalId", Types.BIGINT}, {"ambulanceId", Types.BIGINT},
		{"driverName", Types.VARCHAR}, {"contactNumber", Types.VARCHAR},
		{"email", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"experienceYears", Types.INTEGER}, {"status", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("driverId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hospitalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ambulanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("driverName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("experienceYears", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table HSP_Driver (uuid_ VARCHAR(75) null,driverId LONG not null primary key,hospitalId LONG,ambulanceId LONG,driverName VARCHAR(75) null,contactNumber VARCHAR(75) null,email VARCHAR(75) null,address VARCHAR(75) null,experienceYears INTEGER,status VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table HSP_Driver";

	public static final String ORDER_BY_JPQL = " ORDER BY driver.driverId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY HSP_Driver.driverId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AMBULANCEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HOSPITALID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DRIVERID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DriverModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _driverId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDriverId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _driverId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Driver.class;
	}

	@Override
	public String getModelClassName() {
		return Driver.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Driver, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Driver, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Driver, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Driver)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Driver, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Driver, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Driver)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Driver, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Driver, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Driver, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Driver, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Driver, Object>>();

			attributeGetterFunctions.put("uuid", Driver::getUuid);
			attributeGetterFunctions.put("driverId", Driver::getDriverId);
			attributeGetterFunctions.put("hospitalId", Driver::getHospitalId);
			attributeGetterFunctions.put("ambulanceId", Driver::getAmbulanceId);
			attributeGetterFunctions.put("driverName", Driver::getDriverName);
			attributeGetterFunctions.put(
				"contactNumber", Driver::getContactNumber);
			attributeGetterFunctions.put("email", Driver::getEmail);
			attributeGetterFunctions.put("address", Driver::getAddress);
			attributeGetterFunctions.put(
				"experienceYears", Driver::getExperienceYears);
			attributeGetterFunctions.put("status", Driver::getStatus);
			attributeGetterFunctions.put("createDate", Driver::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Driver::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Driver, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Driver, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Driver, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Driver, String>)Driver::setUuid);
			attributeSetterBiConsumers.put(
				"driverId", (BiConsumer<Driver, Long>)Driver::setDriverId);
			attributeSetterBiConsumers.put(
				"hospitalId", (BiConsumer<Driver, Long>)Driver::setHospitalId);
			attributeSetterBiConsumers.put(
				"ambulanceId",
				(BiConsumer<Driver, Long>)Driver::setAmbulanceId);
			attributeSetterBiConsumers.put(
				"driverName",
				(BiConsumer<Driver, String>)Driver::setDriverName);
			attributeSetterBiConsumers.put(
				"contactNumber",
				(BiConsumer<Driver, String>)Driver::setContactNumber);
			attributeSetterBiConsumers.put(
				"email", (BiConsumer<Driver, String>)Driver::setEmail);
			attributeSetterBiConsumers.put(
				"address", (BiConsumer<Driver, String>)Driver::setAddress);
			attributeSetterBiConsumers.put(
				"experienceYears",
				(BiConsumer<Driver, Integer>)Driver::setExperienceYears);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Driver, String>)Driver::setStatus);
			attributeSetterBiConsumers.put(
				"createDate", (BiConsumer<Driver, Date>)Driver::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Driver, Date>)Driver::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDriverId() {
		return _driverId;
	}

	@Override
	public void setDriverId(long driverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverId = driverId;
	}

	@JSON
	@Override
	public long getHospitalId() {
		return _hospitalId;
	}

	@Override
	public void setHospitalId(long hospitalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hospitalId = hospitalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHospitalId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hospitalId"));
	}

	@JSON
	@Override
	public long getAmbulanceId() {
		return _ambulanceId;
	}

	@Override
	public void setAmbulanceId(long ambulanceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ambulanceId = ambulanceId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAmbulanceId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("ambulanceId"));
	}

	@JSON
	@Override
	public String getDriverName() {
		if (_driverName == null) {
			return "";
		}
		else {
			return _driverName;
		}
	}

	@Override
	public void setDriverName(String driverName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverName = driverName;
	}

	@JSON
	@Override
	public String getContactNumber() {
		if (_contactNumber == null) {
			return "";
		}
		else {
			return _contactNumber;
		}
	}

	@Override
	public void setContactNumber(String contactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNumber = contactNumber;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public int getExperienceYears() {
		return _experienceYears;
	}

	@Override
	public void setExperienceYears(int experienceYears) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_experienceYears = experienceYears;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Driver.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Driver toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Driver>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DriverImpl driverImpl = new DriverImpl();

		driverImpl.setUuid(getUuid());
		driverImpl.setDriverId(getDriverId());
		driverImpl.setHospitalId(getHospitalId());
		driverImpl.setAmbulanceId(getAmbulanceId());
		driverImpl.setDriverName(getDriverName());
		driverImpl.setContactNumber(getContactNumber());
		driverImpl.setEmail(getEmail());
		driverImpl.setAddress(getAddress());
		driverImpl.setExperienceYears(getExperienceYears());
		driverImpl.setStatus(getStatus());
		driverImpl.setCreateDate(getCreateDate());
		driverImpl.setModifiedDate(getModifiedDate());

		driverImpl.resetOriginalValues();

		return driverImpl;
	}

	@Override
	public Driver cloneWithOriginalValues() {
		DriverImpl driverImpl = new DriverImpl();

		driverImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		driverImpl.setDriverId(this.<Long>getColumnOriginalValue("driverId"));
		driverImpl.setHospitalId(
			this.<Long>getColumnOriginalValue("hospitalId"));
		driverImpl.setAmbulanceId(
			this.<Long>getColumnOriginalValue("ambulanceId"));
		driverImpl.setDriverName(
			this.<String>getColumnOriginalValue("driverName"));
		driverImpl.setContactNumber(
			this.<String>getColumnOriginalValue("contactNumber"));
		driverImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		driverImpl.setAddress(this.<String>getColumnOriginalValue("address"));
		driverImpl.setExperienceYears(
			this.<Integer>getColumnOriginalValue("experienceYears"));
		driverImpl.setStatus(this.<String>getColumnOriginalValue("status"));
		driverImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		driverImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return driverImpl;
	}

	@Override
	public int compareTo(Driver driver) {
		long primaryKey = driver.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Driver)) {
			return false;
		}

		Driver driver = (Driver)object;

		long primaryKey = driver.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Driver> toCacheModel() {
		DriverCacheModel driverCacheModel = new DriverCacheModel();

		driverCacheModel.uuid = getUuid();

		String uuid = driverCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			driverCacheModel.uuid = null;
		}

		driverCacheModel.driverId = getDriverId();

		driverCacheModel.hospitalId = getHospitalId();

		driverCacheModel.ambulanceId = getAmbulanceId();

		driverCacheModel.driverName = getDriverName();

		String driverName = driverCacheModel.driverName;

		if ((driverName != null) && (driverName.length() == 0)) {
			driverCacheModel.driverName = null;
		}

		driverCacheModel.contactNumber = getContactNumber();

		String contactNumber = driverCacheModel.contactNumber;

		if ((contactNumber != null) && (contactNumber.length() == 0)) {
			driverCacheModel.contactNumber = null;
		}

		driverCacheModel.email = getEmail();

		String email = driverCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			driverCacheModel.email = null;
		}

		driverCacheModel.address = getAddress();

		String address = driverCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			driverCacheModel.address = null;
		}

		driverCacheModel.experienceYears = getExperienceYears();

		driverCacheModel.status = getStatus();

		String status = driverCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			driverCacheModel.status = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			driverCacheModel.createDate = createDate.getTime();
		}
		else {
			driverCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			driverCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			driverCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return driverCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Driver, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Driver, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Driver, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Driver)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Driver>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Driver.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _driverId;
	private long _hospitalId;
	private long _ambulanceId;
	private String _driverName;
	private String _contactNumber;
	private String _email;
	private String _address;
	private int _experienceYears;
	private String _status;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Driver, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Driver)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("driverId", _driverId);
		_columnOriginalValues.put("hospitalId", _hospitalId);
		_columnOriginalValues.put("ambulanceId", _ambulanceId);
		_columnOriginalValues.put("driverName", _driverName);
		_columnOriginalValues.put("contactNumber", _contactNumber);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("experienceYears", _experienceYears);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("driverId", 2L);

		columnBitmasks.put("hospitalId", 4L);

		columnBitmasks.put("ambulanceId", 8L);

		columnBitmasks.put("driverName", 16L);

		columnBitmasks.put("contactNumber", 32L);

		columnBitmasks.put("email", 64L);

		columnBitmasks.put("address", 128L);

		columnBitmasks.put("experienceYears", 256L);

		columnBitmasks.put("status", 512L);

		columnBitmasks.put("createDate", 1024L);

		columnBitmasks.put("modifiedDate", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Driver _escapedModel;

}