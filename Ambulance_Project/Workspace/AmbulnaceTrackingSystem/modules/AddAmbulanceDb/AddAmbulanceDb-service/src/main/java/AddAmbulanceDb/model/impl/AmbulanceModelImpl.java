/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package AddAmbulanceDb.model.impl;

import AddAmbulanceDb.model.Ambulance;
import AddAmbulanceDb.model.AmbulanceModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Ambulance service. Represents a row in the &quot;HSP_Ambulance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AmbulanceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AmbulanceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AmbulanceImpl
 * @generated
 */
@JSON(strict = true)
public class AmbulanceModelImpl
	extends BaseModelImpl<Ambulance> implements AmbulanceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ambulance model instance should use the <code>Ambulance</code> interface instead.
	 */
	public static final String TABLE_NAME = "HSP_Ambulance";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"ambulanceId", Types.BIGINT},
		{"hospitalId", Types.BIGINT}, {"driverId", Types.BIGINT},
		{"driverName", Types.VARCHAR}, {"ambulanceNumber", Types.VARCHAR},
		{"vehicleType", Types.VARCHAR}, {"status", Types.VARCHAR},
		{"location", Types.VARCHAR}, {"contactNumber", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ambulanceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hospitalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("driverId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("driverName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ambulanceNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table HSP_Ambulance (uuid_ VARCHAR(75) null,ambulanceId LONG not null primary key,hospitalId LONG,driverId LONG,driverName VARCHAR(75) null,ambulanceNumber VARCHAR(75) null,vehicleType VARCHAR(75) null,status VARCHAR(75) null,location VARCHAR(75) null,contactNumber VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table HSP_Ambulance";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ambulance.ambulanceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY HSP_Ambulance.ambulanceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long HOSPITALID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long AMBULANCEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AmbulanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ambulanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAmbulanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ambulanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Ambulance.class;
	}

	@Override
	public String getModelClassName() {
		return Ambulance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Ambulance, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Ambulance, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ambulance, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Ambulance)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Ambulance, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Ambulance, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Ambulance)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Ambulance, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Ambulance, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Ambulance, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Ambulance, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Ambulance, Object>>();

			attributeGetterFunctions.put("uuid", Ambulance::getUuid);
			attributeGetterFunctions.put(
				"ambulanceId", Ambulance::getAmbulanceId);
			attributeGetterFunctions.put(
				"hospitalId", Ambulance::getHospitalId);
			attributeGetterFunctions.put("driverId", Ambulance::getDriverId);
			attributeGetterFunctions.put(
				"driverName", Ambulance::getDriverName);
			attributeGetterFunctions.put(
				"ambulanceNumber", Ambulance::getAmbulanceNumber);
			attributeGetterFunctions.put(
				"vehicleType", Ambulance::getVehicleType);
			attributeGetterFunctions.put("status", Ambulance::getStatus);
			attributeGetterFunctions.put("location", Ambulance::getLocation);
			attributeGetterFunctions.put(
				"contactNumber", Ambulance::getContactNumber);
			attributeGetterFunctions.put(
				"createDate", Ambulance::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Ambulance::getModifiedDate);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Ambulance, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Ambulance, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Ambulance, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Ambulance, String>)Ambulance::setUuid);
			attributeSetterBiConsumers.put(
				"ambulanceId",
				(BiConsumer<Ambulance, Long>)Ambulance::setAmbulanceId);
			attributeSetterBiConsumers.put(
				"hospitalId",
				(BiConsumer<Ambulance, Long>)Ambulance::setHospitalId);
			attributeSetterBiConsumers.put(
				"driverId",
				(BiConsumer<Ambulance, Long>)Ambulance::setDriverId);
			attributeSetterBiConsumers.put(
				"driverName",
				(BiConsumer<Ambulance, String>)Ambulance::setDriverName);
			attributeSetterBiConsumers.put(
				"ambulanceNumber",
				(BiConsumer<Ambulance, String>)Ambulance::setAmbulanceNumber);
			attributeSetterBiConsumers.put(
				"vehicleType",
				(BiConsumer<Ambulance, String>)Ambulance::setVehicleType);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Ambulance, String>)Ambulance::setStatus);
			attributeSetterBiConsumers.put(
				"location",
				(BiConsumer<Ambulance, String>)Ambulance::setLocation);
			attributeSetterBiConsumers.put(
				"contactNumber",
				(BiConsumer<Ambulance, String>)Ambulance::setContactNumber);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Ambulance, Date>)Ambulance::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Ambulance, Date>)Ambulance::setModifiedDate);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAmbulanceId() {
		return _ambulanceId;
	}

	@Override
	public void setAmbulanceId(long ambulanceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ambulanceId = ambulanceId;
	}

	@JSON
	@Override
	public long getHospitalId() {
		return _hospitalId;
	}

	@Override
	public void setHospitalId(long hospitalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_hospitalId = hospitalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalHospitalId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("hospitalId"));
	}

	@JSON
	@Override
	public long getDriverId() {
		return _driverId;
	}

	@Override
	public void setDriverId(long driverId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverId = driverId;
	}

	@JSON
	@Override
	public String getDriverName() {
		if (_driverName == null) {
			return "";
		}
		else {
			return _driverName;
		}
	}

	@Override
	public void setDriverName(String driverName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_driverName = driverName;
	}

	@JSON
	@Override
	public String getAmbulanceNumber() {
		if (_ambulanceNumber == null) {
			return "";
		}
		else {
			return _ambulanceNumber;
		}
	}

	@Override
	public void setAmbulanceNumber(String ambulanceNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ambulanceNumber = ambulanceNumber;
	}

	@JSON
	@Override
	public String getVehicleType() {
		if (_vehicleType == null) {
			return "";
		}
		else {
			return _vehicleType;
		}
	}

	@Override
	public void setVehicleType(String vehicleType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleType = vehicleType;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@JSON
	@Override
	public String getContactNumber() {
		if (_contactNumber == null) {
			return "";
		}
		else {
			return _contactNumber;
		}
	}

	@Override
	public void setContactNumber(String contactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNumber = contactNumber;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Ambulance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Ambulance toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Ambulance>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AmbulanceImpl ambulanceImpl = new AmbulanceImpl();

		ambulanceImpl.setUuid(getUuid());
		ambulanceImpl.setAmbulanceId(getAmbulanceId());
		ambulanceImpl.setHospitalId(getHospitalId());
		ambulanceImpl.setDriverId(getDriverId());
		ambulanceImpl.setDriverName(getDriverName());
		ambulanceImpl.setAmbulanceNumber(getAmbulanceNumber());
		ambulanceImpl.setVehicleType(getVehicleType());
		ambulanceImpl.setStatus(getStatus());
		ambulanceImpl.setLocation(getLocation());
		ambulanceImpl.setContactNumber(getContactNumber());
		ambulanceImpl.setCreateDate(getCreateDate());
		ambulanceImpl.setModifiedDate(getModifiedDate());

		ambulanceImpl.resetOriginalValues();

		return ambulanceImpl;
	}

	@Override
	public Ambulance cloneWithOriginalValues() {
		AmbulanceImpl ambulanceImpl = new AmbulanceImpl();

		ambulanceImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		ambulanceImpl.setAmbulanceId(
			this.<Long>getColumnOriginalValue("ambulanceId"));
		ambulanceImpl.setHospitalId(
			this.<Long>getColumnOriginalValue("hospitalId"));
		ambulanceImpl.setDriverId(
			this.<Long>getColumnOriginalValue("driverId"));
		ambulanceImpl.setDriverName(
			this.<String>getColumnOriginalValue("driverName"));
		ambulanceImpl.setAmbulanceNumber(
			this.<String>getColumnOriginalValue("ambulanceNumber"));
		ambulanceImpl.setVehicleType(
			this.<String>getColumnOriginalValue("vehicleType"));
		ambulanceImpl.setStatus(this.<String>getColumnOriginalValue("status"));
		ambulanceImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		ambulanceImpl.setContactNumber(
			this.<String>getColumnOriginalValue("contactNumber"));
		ambulanceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ambulanceImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return ambulanceImpl;
	}

	@Override
	public int compareTo(Ambulance ambulance) {
		long primaryKey = ambulance.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Ambulance)) {
			return false;
		}

		Ambulance ambulance = (Ambulance)object;

		long primaryKey = ambulance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Ambulance> toCacheModel() {
		AmbulanceCacheModel ambulanceCacheModel = new AmbulanceCacheModel();

		ambulanceCacheModel.uuid = getUuid();

		String uuid = ambulanceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ambulanceCacheModel.uuid = null;
		}

		ambulanceCacheModel.ambulanceId = getAmbulanceId();

		ambulanceCacheModel.hospitalId = getHospitalId();

		ambulanceCacheModel.driverId = getDriverId();

		ambulanceCacheModel.driverName = getDriverName();

		String driverName = ambulanceCacheModel.driverName;

		if ((driverName != null) && (driverName.length() == 0)) {
			ambulanceCacheModel.driverName = null;
		}

		ambulanceCacheModel.ambulanceNumber = getAmbulanceNumber();

		String ambulanceNumber = ambulanceCacheModel.ambulanceNumber;

		if ((ambulanceNumber != null) && (ambulanceNumber.length() == 0)) {
			ambulanceCacheModel.ambulanceNumber = null;
		}

		ambulanceCacheModel.vehicleType = getVehicleType();

		String vehicleType = ambulanceCacheModel.vehicleType;

		if ((vehicleType != null) && (vehicleType.length() == 0)) {
			ambulanceCacheModel.vehicleType = null;
		}

		ambulanceCacheModel.status = getStatus();

		String status = ambulanceCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			ambulanceCacheModel.status = null;
		}

		ambulanceCacheModel.location = getLocation();

		String location = ambulanceCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			ambulanceCacheModel.location = null;
		}

		ambulanceCacheModel.contactNumber = getContactNumber();

		String contactNumber = ambulanceCacheModel.contactNumber;

		if ((contactNumber != null) && (contactNumber.length() == 0)) {
			ambulanceCacheModel.contactNumber = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ambulanceCacheModel.createDate = createDate.getTime();
		}
		else {
			ambulanceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ambulanceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ambulanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return ambulanceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Ambulance, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Ambulance, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ambulance, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Ambulance)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Ambulance>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Ambulance.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _ambulanceId;
	private long _hospitalId;
	private long _driverId;
	private String _driverName;
	private String _ambulanceNumber;
	private String _vehicleType;
	private String _status;
	private String _location;
	private String _contactNumber;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Ambulance, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Ambulance)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("ambulanceId", _ambulanceId);
		_columnOriginalValues.put("hospitalId", _hospitalId);
		_columnOriginalValues.put("driverId", _driverId);
		_columnOriginalValues.put("driverName", _driverName);
		_columnOriginalValues.put("ambulanceNumber", _ambulanceNumber);
		_columnOriginalValues.put("vehicleType", _vehicleType);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("contactNumber", _contactNumber);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("ambulanceId", 2L);

		columnBitmasks.put("hospitalId", 4L);

		columnBitmasks.put("driverId", 8L);

		columnBitmasks.put("driverName", 16L);

		columnBitmasks.put("ambulanceNumber", 32L);

		columnBitmasks.put("vehicleType", 64L);

		columnBitmasks.put("status", 128L);

		columnBitmasks.put("location", 256L);

		columnBitmasks.put("contactNumber", 512L);

		columnBitmasks.put("createDate", 1024L);

		columnBitmasks.put("modifiedDate", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Ambulance _escapedModel;

}