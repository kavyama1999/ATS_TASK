/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package AccountMgmtSystemDB.model.impl;

import AccountMgmtSystemDB.model.AccountMngt;
import AccountMgmtSystemDB.model.AccountMngtModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AccountMngt service. Represents a row in the &quot;Account_AccountMngt&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AccountMngtModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccountMngtImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccountMngtImpl
 * @generated
 */
@JSON(strict = true)
public class AccountMngtModelImpl
	extends BaseModelImpl<AccountMngt> implements AccountMngtModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a account mngt model instance should use the <code>AccountMngt</code> interface instead.
	 */
	public static final String TABLE_NAME = "Account_AccountMngt";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"accountId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"accountNumber", Types.VARCHAR}, {"accountHolderName", Types.VARCHAR},
		{"accountType", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"phoneNumber", Types.VARCHAR}, {"branchName", Types.VARCHAR},
		{"balance", Types.DOUBLE}, {"ifscCode", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accountNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accountHolderName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accountType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("branchName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("balance", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("ifscCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Account_AccountMngt (uuid_ VARCHAR(75) null,accountId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,accountNumber VARCHAR(75) null,accountHolderName VARCHAR(75) null,accountType VARCHAR(75) null,email VARCHAR(75) null,phoneNumber VARCHAR(75) null,branchName VARCHAR(75) null,balance DOUBLE,ifscCode VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table Account_AccountMngt";

	public static final String ORDER_BY_JPQL =
		" ORDER BY accountMngt.accountId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Account_AccountMngt.accountId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACCOUNTID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AccountMngtModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accountId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccountId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accountId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AccountMngt.class;
	}

	@Override
	public String getModelClassName() {
		return AccountMngt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AccountMngt, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AccountMngt, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccountMngt, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AccountMngt)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AccountMngt, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AccountMngt, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AccountMngt)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AccountMngt, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AccountMngt, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AccountMngt, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AccountMngt, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<AccountMngt, Object>>();

			attributeGetterFunctions.put("uuid", AccountMngt::getUuid);
			attributeGetterFunctions.put(
				"accountId", AccountMngt::getAccountId);
			attributeGetterFunctions.put("groupId", AccountMngt::getGroupId);
			attributeGetterFunctions.put(
				"companyId", AccountMngt::getCompanyId);
			attributeGetterFunctions.put("userId", AccountMngt::getUserId);
			attributeGetterFunctions.put("userName", AccountMngt::getUserName);
			attributeGetterFunctions.put(
				"createDate", AccountMngt::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", AccountMngt::getModifiedDate);
			attributeGetterFunctions.put(
				"accountNumber", AccountMngt::getAccountNumber);
			attributeGetterFunctions.put(
				"accountHolderName", AccountMngt::getAccountHolderName);
			attributeGetterFunctions.put(
				"accountType", AccountMngt::getAccountType);
			attributeGetterFunctions.put("email", AccountMngt::getEmail);
			attributeGetterFunctions.put(
				"phoneNumber", AccountMngt::getPhoneNumber);
			attributeGetterFunctions.put(
				"branchName", AccountMngt::getBranchName);
			attributeGetterFunctions.put("balance", AccountMngt::getBalance);
			attributeGetterFunctions.put("ifscCode", AccountMngt::getIfscCode);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AccountMngt, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AccountMngt, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<AccountMngt, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<AccountMngt, String>)AccountMngt::setUuid);
			attributeSetterBiConsumers.put(
				"accountId",
				(BiConsumer<AccountMngt, Long>)AccountMngt::setAccountId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<AccountMngt, Long>)AccountMngt::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<AccountMngt, Long>)AccountMngt::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<AccountMngt, Long>)AccountMngt::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<AccountMngt, String>)AccountMngt::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<AccountMngt, Date>)AccountMngt::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<AccountMngt, Date>)AccountMngt::setModifiedDate);
			attributeSetterBiConsumers.put(
				"accountNumber",
				(BiConsumer<AccountMngt, String>)AccountMngt::setAccountNumber);
			attributeSetterBiConsumers.put(
				"accountHolderName",
				(BiConsumer<AccountMngt, String>)
					AccountMngt::setAccountHolderName);
			attributeSetterBiConsumers.put(
				"accountType",
				(BiConsumer<AccountMngt, String>)AccountMngt::setAccountType);
			attributeSetterBiConsumers.put(
				"email",
				(BiConsumer<AccountMngt, String>)AccountMngt::setEmail);
			attributeSetterBiConsumers.put(
				"phoneNumber",
				(BiConsumer<AccountMngt, String>)AccountMngt::setPhoneNumber);
			attributeSetterBiConsumers.put(
				"branchName",
				(BiConsumer<AccountMngt, String>)AccountMngt::setBranchName);
			attributeSetterBiConsumers.put(
				"balance",
				(BiConsumer<AccountMngt, Double>)AccountMngt::setBalance);
			attributeSetterBiConsumers.put(
				"ifscCode",
				(BiConsumer<AccountMngt, String>)AccountMngt::setIfscCode);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountId = accountId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAccountNumber() {
		if (_accountNumber == null) {
			return "";
		}
		else {
			return _accountNumber;
		}
	}

	@Override
	public void setAccountNumber(String accountNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountNumber = accountNumber;
	}

	@JSON
	@Override
	public String getAccountHolderName() {
		if (_accountHolderName == null) {
			return "";
		}
		else {
			return _accountHolderName;
		}
	}

	@Override
	public void setAccountHolderName(String accountHolderName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountHolderName = accountHolderName;
	}

	@JSON
	@Override
	public String getAccountType() {
		if (_accountType == null) {
			return "";
		}
		else {
			return _accountType;
		}
	}

	@Override
	public void setAccountType(String accountType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountType = accountType;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@JSON
	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return "";
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getBranchName() {
		if (_branchName == null) {
			return "";
		}
		else {
			return _branchName;
		}
	}

	@Override
	public void setBranchName(String branchName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_branchName = branchName;
	}

	@JSON
	@Override
	public double getBalance() {
		return _balance;
	}

	@Override
	public void setBalance(double balance) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_balance = balance;
	}

	@JSON
	@Override
	public String getIfscCode() {
		if (_ifscCode == null) {
			return "";
		}
		else {
			return _ifscCode;
		}
	}

	@Override
	public void setIfscCode(String ifscCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ifscCode = ifscCode;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(AccountMngt.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), AccountMngt.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AccountMngt toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AccountMngt>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccountMngtImpl accountMngtImpl = new AccountMngtImpl();

		accountMngtImpl.setUuid(getUuid());
		accountMngtImpl.setAccountId(getAccountId());
		accountMngtImpl.setGroupId(getGroupId());
		accountMngtImpl.setCompanyId(getCompanyId());
		accountMngtImpl.setUserId(getUserId());
		accountMngtImpl.setUserName(getUserName());
		accountMngtImpl.setCreateDate(getCreateDate());
		accountMngtImpl.setModifiedDate(getModifiedDate());
		accountMngtImpl.setAccountNumber(getAccountNumber());
		accountMngtImpl.setAccountHolderName(getAccountHolderName());
		accountMngtImpl.setAccountType(getAccountType());
		accountMngtImpl.setEmail(getEmail());
		accountMngtImpl.setPhoneNumber(getPhoneNumber());
		accountMngtImpl.setBranchName(getBranchName());
		accountMngtImpl.setBalance(getBalance());
		accountMngtImpl.setIfscCode(getIfscCode());

		accountMngtImpl.resetOriginalValues();

		return accountMngtImpl;
	}

	@Override
	public AccountMngt cloneWithOriginalValues() {
		AccountMngtImpl accountMngtImpl = new AccountMngtImpl();

		accountMngtImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		accountMngtImpl.setAccountId(
			this.<Long>getColumnOriginalValue("accountId"));
		accountMngtImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		accountMngtImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		accountMngtImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		accountMngtImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		accountMngtImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		accountMngtImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		accountMngtImpl.setAccountNumber(
			this.<String>getColumnOriginalValue("accountNumber"));
		accountMngtImpl.setAccountHolderName(
			this.<String>getColumnOriginalValue("accountHolderName"));
		accountMngtImpl.setAccountType(
			this.<String>getColumnOriginalValue("accountType"));
		accountMngtImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		accountMngtImpl.setPhoneNumber(
			this.<String>getColumnOriginalValue("phoneNumber"));
		accountMngtImpl.setBranchName(
			this.<String>getColumnOriginalValue("branchName"));
		accountMngtImpl.setBalance(
			this.<Double>getColumnOriginalValue("balance"));
		accountMngtImpl.setIfscCode(
			this.<String>getColumnOriginalValue("ifscCode"));

		return accountMngtImpl;
	}

	@Override
	public int compareTo(AccountMngt accountMngt) {
		long primaryKey = accountMngt.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AccountMngt)) {
			return false;
		}

		AccountMngt accountMngt = (AccountMngt)object;

		long primaryKey = accountMngt.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AccountMngt> toCacheModel() {
		AccountMngtCacheModel accountMngtCacheModel =
			new AccountMngtCacheModel();

		accountMngtCacheModel.uuid = getUuid();

		String uuid = accountMngtCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			accountMngtCacheModel.uuid = null;
		}

		accountMngtCacheModel.accountId = getAccountId();

		accountMngtCacheModel.groupId = getGroupId();

		accountMngtCacheModel.companyId = getCompanyId();

		accountMngtCacheModel.userId = getUserId();

		accountMngtCacheModel.userName = getUserName();

		String userName = accountMngtCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			accountMngtCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			accountMngtCacheModel.createDate = createDate.getTime();
		}
		else {
			accountMngtCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accountMngtCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accountMngtCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accountMngtCacheModel.accountNumber = getAccountNumber();

		String accountNumber = accountMngtCacheModel.accountNumber;

		if ((accountNumber != null) && (accountNumber.length() == 0)) {
			accountMngtCacheModel.accountNumber = null;
		}

		accountMngtCacheModel.accountHolderName = getAccountHolderName();

		String accountHolderName = accountMngtCacheModel.accountHolderName;

		if ((accountHolderName != null) && (accountHolderName.length() == 0)) {
			accountMngtCacheModel.accountHolderName = null;
		}

		accountMngtCacheModel.accountType = getAccountType();

		String accountType = accountMngtCacheModel.accountType;

		if ((accountType != null) && (accountType.length() == 0)) {
			accountMngtCacheModel.accountType = null;
		}

		accountMngtCacheModel.email = getEmail();

		String email = accountMngtCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			accountMngtCacheModel.email = null;
		}

		accountMngtCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = accountMngtCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			accountMngtCacheModel.phoneNumber = null;
		}

		accountMngtCacheModel.branchName = getBranchName();

		String branchName = accountMngtCacheModel.branchName;

		if ((branchName != null) && (branchName.length() == 0)) {
			accountMngtCacheModel.branchName = null;
		}

		accountMngtCacheModel.balance = getBalance();

		accountMngtCacheModel.ifscCode = getIfscCode();

		String ifscCode = accountMngtCacheModel.ifscCode;

		if ((ifscCode != null) && (ifscCode.length() == 0)) {
			accountMngtCacheModel.ifscCode = null;
		}

		return accountMngtCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AccountMngt, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AccountMngt, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AccountMngt, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AccountMngt)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AccountMngt>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AccountMngt.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _accountId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _accountNumber;
	private String _accountHolderName;
	private String _accountType;
	private String _email;
	private String _phoneNumber;
	private String _branchName;
	private double _balance;
	private String _ifscCode;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AccountMngt, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AccountMngt)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("accountId", _accountId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("accountNumber", _accountNumber);
		_columnOriginalValues.put("accountHolderName", _accountHolderName);
		_columnOriginalValues.put("accountType", _accountType);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("phoneNumber", _phoneNumber);
		_columnOriginalValues.put("branchName", _branchName);
		_columnOriginalValues.put("balance", _balance);
		_columnOriginalValues.put("ifscCode", _ifscCode);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("accountId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("accountNumber", 256L);

		columnBitmasks.put("accountHolderName", 512L);

		columnBitmasks.put("accountType", 1024L);

		columnBitmasks.put("email", 2048L);

		columnBitmasks.put("phoneNumber", 4096L);

		columnBitmasks.put("branchName", 8192L);

		columnBitmasks.put("balance", 16384L);

		columnBitmasks.put("ifscCode", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AccountMngt _escapedModel;

}