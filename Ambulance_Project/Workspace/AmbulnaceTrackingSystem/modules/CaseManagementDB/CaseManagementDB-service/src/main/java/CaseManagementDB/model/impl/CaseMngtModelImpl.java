/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package CaseManagementDB.model.impl;

import CaseManagementDB.model.CaseMngt;
import CaseManagementDB.model.CaseMngtModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CaseMngt service. Represents a row in the &quot;Case_CaseMngt&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CaseMngtModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CaseMngtImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CaseMngtImpl
 * @generated
 */
@JSON(strict = true)
public class CaseMngtModelImpl
	extends BaseModelImpl<CaseMngt> implements CaseMngtModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a case mngt model instance should use the <code>CaseMngt</code> interface instead.
	 */
	public static final String TABLE_NAME = "Case_CaseMngt";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"caseId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"caseNumber", Types.VARCHAR}, {"caseType", Types.VARCHAR},
		{"patientName", Types.VARCHAR}, {"patientAge", Types.INTEGER},
		{"description", Types.VARCHAR}, {"patientGender", Types.VARCHAR},
		{"location", Types.VARCHAR}, {"contactNumber", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("caseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("caseType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("patientName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("patientAge", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("patientGender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactNumber", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Case_CaseMngt (uuid_ VARCHAR(75) null,caseId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,caseNumber VARCHAR(75) null,caseType VARCHAR(75) null,patientName VARCHAR(75) null,patientAge INTEGER,description VARCHAR(75) null,patientGender VARCHAR(75) null,location VARCHAR(75) null,contactNumber VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Case_CaseMngt";

	public static final String ORDER_BY_JPQL = " ORDER BY caseMngt.caseId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Case_CaseMngt.caseId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CASEID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CaseMngtModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _caseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCaseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _caseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CaseMngt.class;
	}

	@Override
	public String getModelClassName() {
		return CaseMngt.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CaseMngt, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CaseMngt, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CaseMngt, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((CaseMngt)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CaseMngt, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CaseMngt, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CaseMngt)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CaseMngt, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CaseMngt, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CaseMngt, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CaseMngt, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<CaseMngt, Object>>();

			attributeGetterFunctions.put("uuid", CaseMngt::getUuid);
			attributeGetterFunctions.put("caseId", CaseMngt::getCaseId);
			attributeGetterFunctions.put("groupId", CaseMngt::getGroupId);
			attributeGetterFunctions.put("companyId", CaseMngt::getCompanyId);
			attributeGetterFunctions.put("userId", CaseMngt::getUserId);
			attributeGetterFunctions.put("userName", CaseMngt::getUserName);
			attributeGetterFunctions.put("createDate", CaseMngt::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", CaseMngt::getModifiedDate);
			attributeGetterFunctions.put("caseNumber", CaseMngt::getCaseNumber);
			attributeGetterFunctions.put("caseType", CaseMngt::getCaseType);
			attributeGetterFunctions.put(
				"patientName", CaseMngt::getPatientName);
			attributeGetterFunctions.put("patientAge", CaseMngt::getPatientAge);
			attributeGetterFunctions.put(
				"description", CaseMngt::getDescription);
			attributeGetterFunctions.put(
				"patientGender", CaseMngt::getPatientGender);
			attributeGetterFunctions.put("location", CaseMngt::getLocation);
			attributeGetterFunctions.put(
				"contactNumber", CaseMngt::getContactNumber);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<CaseMngt, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CaseMngt, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<CaseMngt, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<CaseMngt, String>)CaseMngt::setUuid);
			attributeSetterBiConsumers.put(
				"caseId", (BiConsumer<CaseMngt, Long>)CaseMngt::setCaseId);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<CaseMngt, Long>)CaseMngt::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<CaseMngt, Long>)CaseMngt::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<CaseMngt, Long>)CaseMngt::setUserId);
			attributeSetterBiConsumers.put(
				"userName",
				(BiConsumer<CaseMngt, String>)CaseMngt::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<CaseMngt, Date>)CaseMngt::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<CaseMngt, Date>)CaseMngt::setModifiedDate);
			attributeSetterBiConsumers.put(
				"caseNumber",
				(BiConsumer<CaseMngt, String>)CaseMngt::setCaseNumber);
			attributeSetterBiConsumers.put(
				"caseType",
				(BiConsumer<CaseMngt, String>)CaseMngt::setCaseType);
			attributeSetterBiConsumers.put(
				"patientName",
				(BiConsumer<CaseMngt, String>)CaseMngt::setPatientName);
			attributeSetterBiConsumers.put(
				"patientAge",
				(BiConsumer<CaseMngt, Integer>)CaseMngt::setPatientAge);
			attributeSetterBiConsumers.put(
				"description",
				(BiConsumer<CaseMngt, String>)CaseMngt::setDescription);
			attributeSetterBiConsumers.put(
				"patientGender",
				(BiConsumer<CaseMngt, String>)CaseMngt::setPatientGender);
			attributeSetterBiConsumers.put(
				"location",
				(BiConsumer<CaseMngt, String>)CaseMngt::setLocation);
			attributeSetterBiConsumers.put(
				"contactNumber",
				(BiConsumer<CaseMngt, String>)CaseMngt::setContactNumber);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCaseId() {
		return _caseId;
	}

	@Override
	public void setCaseId(long caseId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseId = caseId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getCaseNumber() {
		if (_caseNumber == null) {
			return "";
		}
		else {
			return _caseNumber;
		}
	}

	@Override
	public void setCaseNumber(String caseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseNumber = caseNumber;
	}

	@JSON
	@Override
	public String getCaseType() {
		if (_caseType == null) {
			return "";
		}
		else {
			return _caseType;
		}
	}

	@Override
	public void setCaseType(String caseType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_caseType = caseType;
	}

	@JSON
	@Override
	public String getPatientName() {
		if (_patientName == null) {
			return "";
		}
		else {
			return _patientName;
		}
	}

	@Override
	public void setPatientName(String patientName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_patientName = patientName;
	}

	@JSON
	@Override
	public int getPatientAge() {
		return _patientAge;
	}

	@Override
	public void setPatientAge(int patientAge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_patientAge = patientAge;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getPatientGender() {
		if (_patientGender == null) {
			return "";
		}
		else {
			return _patientGender;
		}
	}

	@Override
	public void setPatientGender(String patientGender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_patientGender = patientGender;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_location = location;
	}

	@JSON
	@Override
	public String getContactNumber() {
		if (_contactNumber == null) {
			return "";
		}
		else {
			return _contactNumber;
		}
	}

	@Override
	public void setContactNumber(String contactNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactNumber = contactNumber;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(CaseMngt.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), CaseMngt.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CaseMngt toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CaseMngt>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CaseMngtImpl caseMngtImpl = new CaseMngtImpl();

		caseMngtImpl.setUuid(getUuid());
		caseMngtImpl.setCaseId(getCaseId());
		caseMngtImpl.setGroupId(getGroupId());
		caseMngtImpl.setCompanyId(getCompanyId());
		caseMngtImpl.setUserId(getUserId());
		caseMngtImpl.setUserName(getUserName());
		caseMngtImpl.setCreateDate(getCreateDate());
		caseMngtImpl.setModifiedDate(getModifiedDate());
		caseMngtImpl.setCaseNumber(getCaseNumber());
		caseMngtImpl.setCaseType(getCaseType());
		caseMngtImpl.setPatientName(getPatientName());
		caseMngtImpl.setPatientAge(getPatientAge());
		caseMngtImpl.setDescription(getDescription());
		caseMngtImpl.setPatientGender(getPatientGender());
		caseMngtImpl.setLocation(getLocation());
		caseMngtImpl.setContactNumber(getContactNumber());

		caseMngtImpl.resetOriginalValues();

		return caseMngtImpl;
	}

	@Override
	public CaseMngt cloneWithOriginalValues() {
		CaseMngtImpl caseMngtImpl = new CaseMngtImpl();

		caseMngtImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		caseMngtImpl.setCaseId(this.<Long>getColumnOriginalValue("caseId"));
		caseMngtImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		caseMngtImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		caseMngtImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		caseMngtImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		caseMngtImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		caseMngtImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		caseMngtImpl.setCaseNumber(
			this.<String>getColumnOriginalValue("caseNumber"));
		caseMngtImpl.setCaseType(
			this.<String>getColumnOriginalValue("caseType"));
		caseMngtImpl.setPatientName(
			this.<String>getColumnOriginalValue("patientName"));
		caseMngtImpl.setPatientAge(
			this.<Integer>getColumnOriginalValue("patientAge"));
		caseMngtImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		caseMngtImpl.setPatientGender(
			this.<String>getColumnOriginalValue("patientGender"));
		caseMngtImpl.setLocation(
			this.<String>getColumnOriginalValue("location"));
		caseMngtImpl.setContactNumber(
			this.<String>getColumnOriginalValue("contactNumber"));

		return caseMngtImpl;
	}

	@Override
	public int compareTo(CaseMngt caseMngt) {
		long primaryKey = caseMngt.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CaseMngt)) {
			return false;
		}

		CaseMngt caseMngt = (CaseMngt)object;

		long primaryKey = caseMngt.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CaseMngt> toCacheModel() {
		CaseMngtCacheModel caseMngtCacheModel = new CaseMngtCacheModel();

		caseMngtCacheModel.uuid = getUuid();

		String uuid = caseMngtCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			caseMngtCacheModel.uuid = null;
		}

		caseMngtCacheModel.caseId = getCaseId();

		caseMngtCacheModel.groupId = getGroupId();

		caseMngtCacheModel.companyId = getCompanyId();

		caseMngtCacheModel.userId = getUserId();

		caseMngtCacheModel.userName = getUserName();

		String userName = caseMngtCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			caseMngtCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			caseMngtCacheModel.createDate = createDate.getTime();
		}
		else {
			caseMngtCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			caseMngtCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			caseMngtCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		caseMngtCacheModel.caseNumber = getCaseNumber();

		String caseNumber = caseMngtCacheModel.caseNumber;

		if ((caseNumber != null) && (caseNumber.length() == 0)) {
			caseMngtCacheModel.caseNumber = null;
		}

		caseMngtCacheModel.caseType = getCaseType();

		String caseType = caseMngtCacheModel.caseType;

		if ((caseType != null) && (caseType.length() == 0)) {
			caseMngtCacheModel.caseType = null;
		}

		caseMngtCacheModel.patientName = getPatientName();

		String patientName = caseMngtCacheModel.patientName;

		if ((patientName != null) && (patientName.length() == 0)) {
			caseMngtCacheModel.patientName = null;
		}

		caseMngtCacheModel.patientAge = getPatientAge();

		caseMngtCacheModel.description = getDescription();

		String description = caseMngtCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			caseMngtCacheModel.description = null;
		}

		caseMngtCacheModel.patientGender = getPatientGender();

		String patientGender = caseMngtCacheModel.patientGender;

		if ((patientGender != null) && (patientGender.length() == 0)) {
			caseMngtCacheModel.patientGender = null;
		}

		caseMngtCacheModel.location = getLocation();

		String location = caseMngtCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			caseMngtCacheModel.location = null;
		}

		caseMngtCacheModel.contactNumber = getContactNumber();

		String contactNumber = caseMngtCacheModel.contactNumber;

		if ((contactNumber != null) && (contactNumber.length() == 0)) {
			caseMngtCacheModel.contactNumber = null;
		}

		return caseMngtCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CaseMngt, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CaseMngt, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CaseMngt, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((CaseMngt)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CaseMngt>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CaseMngt.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _caseId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _caseNumber;
	private String _caseType;
	private String _patientName;
	private int _patientAge;
	private String _description;
	private String _patientGender;
	private String _location;
	private String _contactNumber;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CaseMngt, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CaseMngt)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("caseId", _caseId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("caseNumber", _caseNumber);
		_columnOriginalValues.put("caseType", _caseType);
		_columnOriginalValues.put("patientName", _patientName);
		_columnOriginalValues.put("patientAge", _patientAge);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("patientGender", _patientGender);
		_columnOriginalValues.put("location", _location);
		_columnOriginalValues.put("contactNumber", _contactNumber);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("caseId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("caseNumber", 256L);

		columnBitmasks.put("caseType", 512L);

		columnBitmasks.put("patientName", 1024L);

		columnBitmasks.put("patientAge", 2048L);

		columnBitmasks.put("description", 4096L);

		columnBitmasks.put("patientGender", 8192L);

		columnBitmasks.put("location", 16384L);

		columnBitmasks.put("contactNumber", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CaseMngt _escapedModel;

}